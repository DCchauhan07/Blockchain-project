<%- include partials/header.ejs %>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome to BeanVerse</title>
    <style>
        body {
            background: #abbaab;
            background: -webkit-linear-gradient(to right, #ffffff, #abbaab);
            background: linear-gradient(to right, #ffffff, #abbaab);
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 20px;
        }

        .header h1 {
            font-size: 3rem;
            color: #333;
            margin-bottom: 10px;
            font-family: 'Arial Black', sans-serif;
        }

        .header p {
            font-size: 1.2rem;
            color: #666;
            font-style: italic;
        }

        .coffee-options {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }

        .coffee-option {
            text-align: center;
        }

        .coffee-option img {
            width: 200px;
            height: auto;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .coffee-option p {
            font-size: 1rem;
            color: #666;
        }

        .questions {
            text-align: center;
            margin-top: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .questions input {
            width: calc(100% - 22px);
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            box-sizing: border-box;
        }

        .questions button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin-top: 10px;
            cursor: pointer;
            border-radius: 8px;
            transition: background-color 0.3s ease;
        }

        .questions button:hover {
            background-color: #45a049;
        }

        .metamask-area {
            text-align: right;
            margin-bottom: 20px;
        }

        .metamask-area img {
            width: 100px;
            height: 100px;
        }

        @media (max-width: 768px) {
            .metamask-area {
                text-align: center;
            }
        }
    </style>
</head>

<body onload="connectMetamask(),connectContract()">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
    <div class="container">
        <div class="row mt-5">
            <div class="col-md-6 offset-md-3">
                <div id="readArea" class="text-center metamask-area">
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/MetaMask_Fox.svg/1200px-MetaMask_Fox.svg.png" alt="MetaMask Logo">
                    <h2 class="mt-3">Connected to MetaMask</h2>
                    <p id="contractArea">Status: Not connected to Contract</p>
                    <p id="userArea" class="mt-3 text-muted">Status: Not connected to MetaMask</p>
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="header">
            <h1>Welcome to BeanVerse</h1>
            <p>Discover the finest selection of Coffee, Pastries, Tea and Cake</p>
        </div>

        <div class="coffee-options">
            <div class="coffee-option">
                <img src="https://peekncooksa.blob.core.windows.net/index-recipe/indian_spiced_tea.jpg" alt="Tea">
                <p>Tea</p>
            </div>
            <div class="coffee-option">
                <img src="https://coffeeaffection.com/wp-content/uploads/2021/05/Chocolate-frappe-coffee_Elena-Veselova_shutterstock.jpg" alt="Frappuccino">
                <p>Frappuccino</p>
            </div>
            <div class="coffee-option">
                <img src="https://img.taste.com.au/56I8MomY/w720-h480-cfill-q80/taste/2016/11/caramello-cake-105070-1.jpeg" alt="Cake">
                <p>Cake</p>
            </div>
            <div class="coffee-option">
                <img src="https://img.cake24x7.com/writable/apps/cake24x7/ProductGallery/5969/Mouth-Watering-Chocolate-Pastry---6-Pcs.jpg" alt="Chocolate Pastry">
                <p>Pastry</p>
            </div>
            
        </div>
        <div class="questions">
            <input type="text" id="name">
            <input type="text" id="email">
            <input type="text" id="mobile">
            <button onclick="setDetails(window.contract)">Submit</button>
            <button onclick="getDetails(window.contract)">Show</button>

        </div>
            <div id="details"></div>
    </body>
    <script>

        let account;
    
        const connectMetamask = async () => {
            if (window.ethereum !== "undefined") {
                const accounts = await ethereum.request({method: "eth_requestAccounts"});
                account = accounts[0];
                document.getElementById("userArea").innerHTML = `User Account: ${account}`;
            }
        }
        let contract;

        const connectContract = async () => {
            console.log("Initializing contract...");
            const ABI = [
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "mobile",
                        "type": "string"
                    }
                ],
                "name": "DetailsSet",
                "type": "event"
            },
            {
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "_name",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_email",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_mobile",
                        "type": "string"
                    }
                ],
                "name": "setDetails",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "email",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getDetails",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "mobile",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "name",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ];
            const Address = "0xdE93b86b0c7a8e1Bc4A87264838b05328b9Cc483";
            try {
                window.web3 = await new Web3(window.ethereum);
                window.contract = await new window.web3.eth.Contract(ABI, Address);
                console.log("Contract initialized successfully.");
                document.getElementById("contractArea").innerHTML = "Connected to Contract";
            } catch (error) {
                console.error('Error initializing contract:', error);
                alert('Failed to connect to contract');
            }
        }
        
        const setDetails = async (contract) => { 
            console.log("Setting details...");
            const name = document.getElementById("name").value;
            const email = document.getElementById("email").value;
            const mobile = document.getElementById("mobile").value;
            // Check if any of the fields are empty
            if (!name || !email || !mobile) {
                alert('Please fill in all fields');
                return;
            }
            window.ethereum.request({ method: 'eth_requestAccounts' })
                .then((accounts) => {
                    const account = accounts[0];
                    console.log("Sending transaction to set details...");
                    return contract.methods.setDetails(name, email, mobile).send({ from: account });
                })
                .then(() => {
                    console.log("Details set successfully.");
                    alert('Details set successfully');
                })
                .catch((error) => {
                    console.error('Error setting details:', error);
                    alert('Failed to set details');
                });
        }

        const getDetails = async () => {
            try {
                const contract = window.contract; 
                const result = await contract.methods.getDetails().call(); 
                const name = result[0];
                const email = result[1];
                const mobile = result[2];
                document.getElementById("details").innerHTML = `
                    Name: ${name}<br>
                    Email: ${email}<br>
                    Mobile: ${mobile}<br>
                `;
            } catch (error) {
                console.error('Error getting details:', error);
                alert('Failed to get details');
            }
        }        
    </script>
</html>    